{"version":3,"sources":["comonents/Footer.js","pages/Home.js","pages/CV.js","pages/About.js","pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Container","fluid","Row","Col","md","sm","Home","props","CV","About","Contact","App","state","title","headerLinks","path","home","subTitle","someText","cv","about","contact","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","to","exact","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAoBiBA,MAjBjB,WACI,OACA,4BAAQC,UAAU,QAChB,kBAACC,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,CAAKH,UAAU,0CACb,kBAACI,EAAA,EAAD,CAAKJ,UAAU,MAAMK,GAAI,EAAGC,GAAI,IAAhC,gBAGA,kBAACF,EAAA,EAAD,CAAKJ,UAAU,iCAAiCK,GAAI,GAApD,sECDOE,MARjB,SAAcC,GACV,OACA,gCACE,iDCKWC,MARjB,SAAYD,GACR,OACA,gCACE,oDCKWE,MARjB,SAAeF,GACX,OACA,gCACE,uDCKWG,MARjB,SAAiBH,GACb,OACA,gCACE,yDCyGSI,E,YAvFb,WAAYJ,GAAQ,IAAD,8BACjB,4CAAMA,KACDK,MAAQ,CACXC,MAAO,wBACPC,YAAa,CACX,CAAED,MAAO,OAAQE,KAAM,KACvB,CAAEF,MAAO,KAAME,KAAM,OACrB,CAAEF,MAAO,QAASE,KAAM,UACxB,CAAEF,MAAO,UAAWE,KAAM,aAE5BC,KAAM,CACJH,MAAO,wBACPI,SAAU,wBACVC,SAAU,qBAEZC,GAAI,CACFN,MAAO,oBAETO,MAAO,CACLP,MAAO,YAETQ,QAAS,CACPR,MAAO,eAtBM,E,sEA2BT,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAACb,EAAA,EAAD,CAAWD,UAAU,MAAME,OAAO,GAChC,kBAACqB,EAAA,EAAD,CAAQvB,UAAU,gBAAgBwB,GAAG,cAAcC,OAAO,MACxD,kBAACF,EAAA,EAAOG,MAAR,qBAEA,kBAACH,EAAA,EAAOI,OAAR,CAAe3B,UAAU,WAAW4B,gBAAc,kBAClD,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,iBAClB,kBAACC,EAAA,EAAD,CAAK/B,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWgC,GAAG,KAA9B,QAGA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,OAA9B,MAGA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,UAA9B,SAGA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,YAA9B,cAON,kBAAC,IAAD,CACEhB,KAAK,IACLiB,OAAK,EACLC,OAAQ,kBACN,kBAAC,EAAD,CACEpB,MAAO,EAAKD,MAAMI,KAAKH,MACvBI,SAAU,EAAKL,MAAMI,KAAKC,SAC1BC,SAAU,EAAKN,MAAMI,KAAKC,cAIhC,kBAAC,IAAD,CACEF,KAAK,MACLiB,OAAK,EACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAIpB,MAAO,EAAKD,MAAMO,GAAGN,WAEzC,kBAAC,IAAD,CACEE,KAAK,SACLiB,OAAK,EACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAOpB,MAAO,EAAKD,MAAMQ,MAAMP,WAE/C,kBAAC,IAAD,CACEE,KAAK,WACLiB,OAAK,EACLC,OAAQ,kBAAM,kBAAC,EAAD,CAASpB,MAAO,EAAKD,MAAMS,QAAQR,WAGnD,kBAAC,EAAD,Y,GAjFQqB,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9bd1a3c9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nfunction Footer() {\n    return ( \n    <footer className=\"mt-5\">\n      <Container fluid={true}>\n        <Row className=\"border-top justify-content-between p-3\">\n          <Col className=\"p-0\" md={3} sm={12}> \n            Allan Kadhem\n          </Col>\n          <Col className=\"p-0 d-flex justify-content-end\" md={4}> \n            This site was made using React & Bootstrap. Find out how here.\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n    )\n  }\n\n  export default Footer;","import React from \"react\";\n\nfunction Home(props) {\n    return ( \n    <header>\n      <h3>This is my Home</h3>\n    </header>\n    )\n  }\n\n  export default Home;","import React from \"react\";\n\nfunction CV(props) {\n    return ( \n    <header>\n      <h3>This is my CV page</h3>\n    </header>\n    )\n  }\n\n  export default CV;","import React from \"react\";\n\nfunction About(props) {\n    return ( \n    <header>\n      <h3>This is my About page</h3>\n    </header>\n    )\n  }\n\n  export default About;","import React from \"react\";\n\nfunction Contact(props) {\n    return ( \n    <header>\n      <h3>This is my Contact Page</h3>\n    </header>\n    )\n  }\n\n  export default Contact;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nimport \"./App.css\";\nimport Footer from \"./comonents/Footer\";\nimport Home from \"./pages/Home\";\nimport CV from \"./pages/CV\";\nimport About from \"./pages/About\";\nimport Contact from \"./pages/Contact\";\n\n/* function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainContent />\n      <Footer />\n    </div>\n  );\n} */\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"First Name, Last Name\",\n      headerLinks: [\n        { title: \"Home\", path: \"/\" },\n        { title: \"CV\", path: \"/cv\" },\n        { title: \"About\", path: \"/about\" },\n        { title: \"Contact\", path: \"/contact\" }\n      ],\n      home: {\n        title: \"This is the Home Page\",\n        subTitle: \"This is the Sub Title\",\n        someText: \"This is some text\"\n      },\n      cv: {\n        title: \"The boring stuff\"\n      },\n      about: {\n        title: \"About me\"\n      },\n      contact: {\n        title: \"Let's talk\"\n      }\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <Container className=\"p-0\" fluid={true}>\n          <Navbar className=\"border-bottom\" bg=\"transparent\" expand=\"lg\">\n            <Navbar.Brand>Allan Kadhem</Navbar.Brand>\n\n            <Navbar.Toggle className=\"border-0\" aria-controls=\"navbar-toggle\" />\n            <Navbar.Collapse id=\"navbar-toggle\">\n              <Nav className=\"ml-auto\">\n                <Link className=\"nav-link\" to=\"/\">\n                  Home\n                </Link>\n                <Link className=\"nav-link\" to=\"/cv\">\n                  CV\n                </Link>\n                <Link className=\"nav-link\" to=\"/about\">\n                  About\n                </Link>\n                <Link className=\"nav-link\" to=\"/contact\">\n                  Contact\n                </Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <Home\n                title={this.state.home.title}\n                subTitle={this.state.home.subTitle}\n                someText={this.state.home.subTitle}\n              />\n            )}\n          />\n          <Route\n            path=\"/cv\"\n            exact\n            render={() => <CV title={this.state.cv.title} />}\n          />\n          <Route\n            path=\"/about\"\n            exact\n            render={() => <About title={this.state.about.title} />}\n          />\n          <Route\n            path=\"/contact\"\n            exact\n            render={() => <Contact title={this.state.contact.title} />}\n          />\n\n          <Footer />\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}